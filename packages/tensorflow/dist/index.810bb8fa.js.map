{"mappings":"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","sources":["script.js"],"sourcesContent":["console.log('Hello TensorFlow');\r\nasync function getData() {\r\n  const carsDataResponse = await fetch('https://storage.googleapis.com/tfjs-tutorials/carsData.json');\r\n  const carsData = await carsDataResponse.json();\r\n  const cleaned = carsData.map(car => ({\r\n    mpg: car.Miles_per_Gallon,\r\n    horsepower: car.Horsepower,\r\n  }))\r\n  .filter(car => (car.mpg != null && car.horsepower != null));\r\n\r\n  return cleaned;\r\n}\r\n\r\nfunction createModel() {\r\n  // Create a sequential model\r\n  const model = tf.sequential();\r\n\r\n  // Add a single input layer\r\n  model.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));\r\n\r\n  // Add an output layer\r\n  model.add(tf.layers.dense({units: 1, useBias: true}));\r\n\r\n  return model;\r\n}\r\n\r\nfunction convertToTensor(data) {\r\n  // Wrapping these calculations in a tidy will dispose any\r\n  // intermediate tensors.\r\n\r\n  return tf.tidy(() => {\r\n    // Step 1. Shuffle the data\r\n    tf.util.shuffle(data);\r\n\r\n    // Step 2. Convert data to Tensor\r\n    const inputs = data.map(d => d.horsepower)\r\n    const labels = data.map(d => d.mpg);\r\n\r\n    const inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\r\n    const labelTensor = tf.tensor2d(labels, [labels.length, 1]);\r\n\r\n    //Step 3. Normalize the data to the range 0 - 1 using min-max scaling\r\n    const inputMax = inputTensor.max();\r\n    const inputMin = inputTensor.min();\r\n    const labelMax = labelTensor.max();\r\n    const labelMin = labelTensor.min();\r\n\r\n    const normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\r\n    const normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\r\n\r\n    return {\r\n      inputs: normalizedInputs,\r\n      labels: normalizedLabels,\r\n      // Return the min/max bounds so we can use them later.\r\n      inputMax,\r\n      inputMin,\r\n      labelMax,\r\n      labelMin,\r\n    }\r\n  });\r\n}\r\nasync function trainModel(model, inputs, labels) {\r\n  // Prepare the model for training.\r\n  model.compile({\r\n    optimizer: tf.train.adam(),\r\n    loss: tf.losses.meanSquaredError,\r\n    metrics: ['mse'],\r\n  });\r\n\r\n  const batchSize = 32;\r\n  const epochs = 50;\r\n\r\n  return await model.fit(inputs, labels, {\r\n    batchSize,\r\n    epochs,\r\n    shuffle: true,\r\n    callbacks: tfvis.show.fitCallbacks(\r\n      { name: 'Training Performance' },\r\n      ['loss', 'mse'],\r\n      { height: 200, callbacks: ['onEpochEnd'] }\r\n    )\r\n  });\r\n}\r\n\r\n// Prepare the model for training.\r\nmodel.compile({\r\n  optimizer: tf.train.adam(),\r\n  loss: tf.losses.meanSquaredError,\r\n  metrics: ['mse'],\r\n});\r\n\r\nasync function run() {\r\n  // Load and plot the original input data that we are going to train on.\r\n  const data = await getData();\r\n  const values = data.map(d => ({\r\n    x: d.horsepower,\r\n    y: d.mpg,\r\n  }));\r\n\r\n  tfvis.render.scatterplot(\r\n    {name: 'Horsepower v MPG'},\r\n    {values},\r\n    {\r\n      xLabel: 'Horsepower',\r\n      yLabel: 'MPG',\r\n      height: 300\r\n    }\r\n  );\r\n  const model = createModel();\r\n  tfvis.show.modelSummary({name: 'Model Summary'}, model);\r\n  // More code will be added below\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', run);"],"names":[],"version":3,"file":"index.810bb8fa.js.map","sourceRoot":"/__parcel_source_root/"}